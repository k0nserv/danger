# coding: utf-8
require "danger/helpers/comments_helper"
require "danger/danger_core/violation"

SINGLE_TABLE_COMMENT = <<-EOS.freeze
  Other comment content
  <table>
    <thead><tr><th width="50"></th><th width="100%">1 Error</th></tr></thead>
    <tbody><tr>
    <td>
      <g-emoji alias="no_entry_sign" fallback-src="https://example.com/1f6ab.png">üö´</g-emoji
    </td>
    <td data-sticky="true"><p>Please include a CHANGELOG entry. You can find it at <a href="https://github.com/danger/danger/blob/master/CHANGELOG.md">CHANGELOG.md</a>.</p>
    </td></tr></tbody>
  </table>
  generated by Danger
EOS

MULTI_TABLE_COMMENT = <<-EOS.freeze
  Other comment content
  <table>
    <thead><tr><th width="50"></th><th width="100%">1 Error</th></tr></thead>
    <tbody><tr>
    <td>
      <g-emoji alias="no_entry_sign" fallback-src="https://example.com/1f6ab.png">üö´</g-emoji
    </td>
    <td data-sticky="true"><p>Please include a CHANGELOG entry.
    You can find it at
    <a href="https://github.com/danger/danger/blob/master/CHANGELOG.md">CHANGELOG.md</a>.</p>
    </td></tr></tbody>
  </table>
  <table>
    <thead><tr><th width="50"></th><th width="100%">1 Warning</th></tr></thead>
    <tbody><tr>
    <td>
      <g-emoji alias="warning" fallback-src="https://example.com/unicode/26a0.png">‚ö†Ô∏è</g-emoji>
    </td>
    <td data-sticky="true"><p>External contributor has edited the Gemspec</p>
    </td></tr></tbody>
  </table>
  generated by Danger
EOS

class Dummy
end

describe Danger::Helpers::CommentsHelper do
  let(:dummy) do
    d = Dummy.new
    d.extend(described_class)
    d
  end

  describe "#markdown_parser" do
    it "is a Redcarpet::Markdown instance" do
      parser = dummy.markdown_parser
      expect(parser).to be_an_instance_of(Redcarpet::Markdown)
    end

    it "uses a HTML renderer" do
      parser = dummy.markdown_parser
      expect(parser.renderer).to be_an_instance_of(Redcarpet::Render::HTML)
    end
  end

  describe "#parse_tables_from_comment" do
    it "splits a single table comment" do
      result = dummy.parse_tables_from_comment(SINGLE_TABLE_COMMENT)
      expect(result.size).to be(2)
      expect(result[0]).to include("<table>")
      expect(result[0]).to include("<thead>")
      expect(result[0]).to include("<tbody>")

      expect(result[1]).not_to include("<table>")
      expect(result[1]).not_to include("<thead>")
      expect(result[1]).not_to include("<tbody>")
    end

    it "splits a multi table comment" do
      result = dummy.parse_tables_from_comment(MULTI_TABLE_COMMENT)
      expect(result.size).to be(3)
      expect(result[0]).to include("<table>")
      expect(result[0]).to include("<thead>")
      expect(result[0]).to include("<tbody>")
      expect(result[0]).to include("Error")
      expect(result[0]).not_to include("Warning")

      expect(result[1]).to include("<table>")
      expect(result[1]).to include("<thead>")
      expect(result[1]).to include("<tbody>")
      expect(result[1]).not_to include("Error")
      expect(result[1]).to include("Warning")

      expect(result[2]).not_to include("<table>")
      expect(result[2]).not_to include("<thead>")
      expect(result[2]).not_to include("<tbody>")
    end
  end

  describe "#violations_from_table" do
    it "finds violations" do
      violations = dummy.violations_from_table(SINGLE_TABLE_COMMENT)

      expect(violations.size).to be(1)
      expect(violations.first).to eq("<p>Please include a CHANGELOG entry. You can find it at <a href=\"https://github.com/danger/danger/blob/master/CHANGELOG.md\">CHANGELOG.md</a>.</p>")
    end
  end

  describe "#parse_comment" do
    it "parse violations by kind" do
      violations = dummy.parse_comment(MULTI_TABLE_COMMENT)

      expect(violations[:error].size).to be(1)
      expect(violations[:warning].size).to be(1)
      expect(violations[:message]).to be_nil

      expect(violations[:error][0]).to include("Please include a CHANGELOG")
      expect(violations[:warning][0]).to include("External contributor has edited")
    end
  end

  describe "#table" do
    let(:violation_1) { Danger::Violation.new("**Violation 1**", false) }
    let(:violation_2) do
      Danger::Violation.new("A [link](https://example.com)", true)
    end

    it "produces table data" do
      table_data = dummy.table("2 Errors", "no_entry_sign", [violation_1, violation_2], {})

      expect(table_data[:name]).to eq("2 Errors")
      expect(table_data[:emoji]).to eq("no_entry_sign")
      expect(table_data[:content].size).to be(2)
      expect(table_data[:content][0].message).to eq("<strong>Violation 1</strong>")
      expect(table_data[:content][0].sticky).to eq(false)

      expect(table_data[:content][1].message).to eq(
        "A <a href=\"https://example.com\">link</a>"
      )
      expect(table_data[:content][1].sticky).to eq(true)
      expect(table_data[:resolved]).to be_empty
      expect(table_data[:count]).to be(2)
    end
  end

  describe "#table_kind_from_title" do
    [
      { title: "errors", singular: "Error", plural: "Errors", expected: :error },
      { title: "warnings", singular: "Warning", plural: "Warnings", expected: :warning },
      { title: "messages", singular: "Message", plural: "Messages", expected: :message }
    ].each do |option|
      describe option[:title] do
        it "handles singular" do
          kind = dummy.table_kind_from_title("1 #{option[:singular]}")
          expect(kind).to eq(option[:expected])
        end

        it "handles plural" do
          kind = dummy.table_kind_from_title("42 #{option[:plural]}")
          expect(kind).to eq(option[:expected])
        end

        it "handles lowercase" do
          kind = dummy.table_kind_from_title("42 #{option[:plural].downcase}")
          expect(kind).to eq(option[:expected])
        end
      end
    end
  end

  describe "#generate_comment" do
    it "produces the exepected coment" do
      comment = dummy.generate_comment(
        warnings: [Danger::Violation.new("This is a warning", false)],
        errors: [Danger::Violation.new("This is an error", true)],
        messages: [Danger::Violation.new("This is a message", false)],
        markdowns: ["*Raw markdown*"],
        danger_id: "my_danger_id",
        template: "github"
      )

      expect(comment).to include('data-meta="generated_by_my_danger_id"')

      expect(comment).to include('<td data-sticky="true">This is an error</td>')
      expect(comment).to include("<td>:no_entry_sign:</td>")

      expect(comment).to include('<td data-sticky="false">This is a warning</td>')
      expect(comment).to include("<td>:warning:</td>")

      expect(comment).to include('<td data-sticky="false">This is a message</td>')
      expect(comment).to include("<td>:warning:</td>")

      expect(comment).to include("*Raw markdown*")
    end
  end

  describe "#generate_description" do
    it "Handles no errors or warnings" do
      message = dummy.generate_description(warnings: [], errors: [])
      expect(message).to include("All green.")
    end

    it "handles a single error and a single warning" do
      message = dummy.generate_description(warnings: [1], errors: [1])

      expect(message).to include("‚ö† ")
      expect(message).to include("Error")
      expect(message).to include("Warning")
      expect(message).to include("Don't worry, everything is fixable.")
    end

    it "handles multiple errors and warning with pluralisation" do
      message = dummy.generate_description(warnings: [1, 2], errors: [1, 2])

      expect(message).to include("‚ö† ")
      expect(message).to include("Errors")
      expect(message).to include("Warnings")
      expect(message).to include("Don't worry, everything is fixable.")
    end
  end
end
